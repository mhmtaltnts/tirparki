// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  OFFICIAL
  MANAGER
  CUSTOMER
  EMPLOYEE
  ADMIN
}

enum Status {
  PENDING
  PAID
}

model User {
  id        String     @id @unique @default(cuid())
  name      String     @db.VarChar(255)
  email     String     @unique @db.VarChar(255)
  password  String?    @db.VarChar(255)
  role      String     @default("USER")
  image     String?
  entries   Entry[]
  invoices  Invoice[]
  exits     Exit[]
  customs   Customs[]
  customers Customer[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([email])
}

model Entry {
  id         String    @id @default(cuid())
  trailer    String    @db.VarChar(100)
  truck      String    @db.VarChar(100)
  cargo      String    @db.VarChar(255)
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @db.VarChar(255)
  invoice    Invoice?
  customs    Customs?
  exit       Exit?
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@index([customerId])
}

model Exit {
  id        String   @id @default(cuid())
  entryId   String   @unique
  entry     Entry    @relation(fields: [entryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  truck     String   @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entryId])
}

model Customs {
  id        String   @id @default(cuid())
  entryId   String   @unique
  entry     Entry    @relation(fields: [entryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entryId])
}

model Invoice {
  id        String   @id @default(cuid())
  entryId   String   @unique
  entry     Entry?   @relation(fields: [entryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount    Int
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([entryId])
}

model Customer {
  id        String   @id @default(cuid())
  name      String   @unique
  email     String?  @unique
  address   String?
  tel       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  entries   Entry[]

  @@index([userId])
}
