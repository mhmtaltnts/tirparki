// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_EXTERNAL")
}

enum Role {
  USER
  OFFICIAL
  MANAGER
  CUSTOMER
  EMPLOYEE
  ADMIN
}

enum Status {
  PENDING
  PAID
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

//model Session {
//  id           String   @id @default(cuid())
//  sessionToken String   @unique
//  userId       String
//  expires      DateTime
//  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//}

model User {
  id            String    @id @unique @default(cuid())
  name          String?   @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  emailVerified DateTime?
  password      String?   @db.VarChar(255)
  role          Role      @default(USER)
  image         String?
  address       String?
  phone         String?
  records       Entry[]   @relation("recorder")
  entries       Entry[]   @relation("customer")
  invoices      Invoice[]
  exits         Exit[]
  customs       Customs[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  //sessions      Session[]

  @@index([email])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String?
  email      String?
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Entry {
  id         String   @id @default(cuid())
  trailer    String   @db.VarChar(100)
  truck      String   @db.VarChar(100)
  cargo      String?  @db.VarChar(255)
  customer   User?    @relation("customer", fields: [customerId], references: [id])
  customerId String?  @db.VarChar(255)
  invoice    Invoice?
  customs    Customs?
  exit       Exit?
  recorder   User     @relation("recorder", fields: [recorderId], references: [id])
  recorderId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([customerId])
}

model Exit {
  id         String   @id @default(cuid())
  entryId    String   @unique
  entry      Entry    @relation(fields: [entryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  recorderId String
  recorder   User     @relation(fields: [recorderId], references: [id])
  truck      String   @db.VarChar(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([entryId])
}

model Customs {
  id          String   @id @default(cuid())
  entryId     String   @unique
  entry       Entry    @relation(fields: [entryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  registrarId String
  registrar   User     @relation(fields: [registrarId], references: [id])
  desc        String   @default(" ")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([entryId])
}

model ParkingRate {
  id        String   @id @default(cuid())
  rate      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id          String   @id @default(cuid())
  entryId     String   @unique
  entry       Entry?   @relation(fields: [entryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  registrar   User     @relation(fields: [registrarId], references: [id])
  registrarId String
  amount      Int
  status      Status   @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([registrarId])
  @@index([entryId])
}
